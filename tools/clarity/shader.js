// gets the number of samples after the center sample
function nFromKsize(n) {
  return ((n-1)/2)+1
}

var colors = {
  0:'r',
  1:'g',
  2:'b',
  3:'a',
}

function genReadTextureData(sampler, i) {
  return `texelFetch(${sampler}, ivec2(${Math.floor(i/4)},0), 0).${colors[Math.floor(i%4)]}`
}

// genorate frag shaders
module.exports=function(size, direction){

  var header =
  `# version 300 es
  // generated by OpenDarkroom/tools/nlmeans
  // impliments fast nlmeans filter in glsl
  uniform sampler2D texSampler;
  uniform ivec2 size;
  uniform sampler2D weights;
  in highp vec2 textureCoord;
  out highp vec4 fragmentColor;
  `

  var main = `void main(void)`
  main += '{\n'
  main += ' highp ivec2 p = ivec2(int(textureCoord.x * float(size.x)), int(textureCoord.y * float(size.y)));\n'
  main += ' highp vec3 acc = vec3(0.0);\n'
  for (var i=-size; i<=size; i++){
    if (direction === 0) {
      main+=` acc+= texelFetch(texSampler, ivec2(clamp(p.x+${i}, 0, size.x-1), clamp(p.y, 0, size.y-1)), 0).rgb * ${genReadTextureData('weights', Math.abs(i))};\n`
    } else {
      main+=` acc+= texelFetch(texSampler, ivec2(clamp(p.x, 0, size.x-1), clamp(p.y+${i}, 0, size.y-1)), 0).rgb * ${genReadTextureData('weights', Math.abs(i))};\n`
    }
  }
  main += `
  fragmentColor.rgb = acc;
  fragmentColor.a  = 1.0;`
  main += '}\n'

  final = ''
  final += header
  final += main

  return final
}
